<?php
/** @var \AMF\EasyMenuAdminUi\Block\Adminhtml\Edit $block */

/** @var \AMF\EasyMenuAdminUi\ViewModel\Tree $viewModel */
$viewModel = $block->getViewModel();
?>

<?php
$menuTree = $viewModel->getMenuItemTree();
?>
<h3 class="head-categories icon-head">
    <?php echo __('Menu'); ?>
</h3>
<div class="menu-side-cols">
    <div class="sidebar-actions">
        <?php echo $block->getMainAddButtonHtml(); ?><br>

        <?php if (!empty($menuTree)): ?>
            <?php echo $block->getAddSubButtonHtml(); ?>
        <?php endif; ?>
    </div>

    <?php if (!empty($menuTree)): ?>
        <div class="tree-actions">
            <a href="#"
               onclick="tree.collapseTree(); return false;"><?php echo __('Collapse All') ?></a>
            <span class="separator">|</span> <a href="#" onclick="tree.expandTree(); return false;">
                <?php echo __('Expand All') ?>
            </a>
            <br>
        </div>
    <?php endif; ?>

    <div class="tree-holder">
        <div id="tree-div" class="tree-wrapper"></div>
    </div>
</div>

<script>
    var tree;
    require([
        "jquery",
        'Magento_Ui/js/modal/modal',
        "jquery/ui",
        "prototype",
        "extjs/ext-tree-checkbox",
        "mage/adminhtml/form",
        "mage/translate"
    ], function (jQuery, modal) {

        var registry = {
            data: [],

            set: function (key, value) {
                this.data[key] = value;
            },

            get: function (key) {
                return this.data[key];
            }
        };

        /**
         * Fix ext compatibility with prototype 1.6
         */
        Ext.lib.Event.getTarget = function(e) {
            var ee = e.browserEvent || e;
            return ee.target ? Event.element(ee) : null;
        };

        Ext.tree.TreePanel.Enhanced = function(el, config) {
            Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, config);
        };

        Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {
            loadTree : function(config, firstLoad) {
                var parameters = config['parameters'];
                var data = config['data'];

                this.storeId = parameters['store_id'];

                if ((typeof parameters['root_visible']) != 'undefined') {
                    this.rootVisible = parameters['root_visible']*1;
                }

                var root = new Ext.tree.TreeNode(parameters);

                this.nodeHash = {};
                this.setRootNode(root);
                this.modal = modal;

                if (firstLoad) {
                    this.addListener('click', this.menuItemClick);
                    this.addListener('beforenodedrop', itemMenuMove.bind(this));
                }

                this.loader.buildMenuTree(root, data);
                this.el.dom.innerHTML = '';
                // render the tree
                this.render();
                if (parameters['expanded']) {
                    this.expandAll();
                } else {
                    root.expand();
                }

                var selectedNode;

                if (parameters['menu_id'] == '0' && parameters['parent'] == 0) {
                    this.currentNodeId = parameters['menu_id'];
                } else {
                    if (parameters['menu_id'] == '0'  && parameters['parent'] > 0) {
                        selectedNode = this.getNodeById(parameters['parent']);

                        if (selectedNode) {
                            this.currentNodeId = parameters['parent'];
                        }
                    } else {
                        selectedNode = this.getNodeById(parameters['menu_id']);

                        if (selectedNode) {
                            this.currentNodeId = parameters['menu_id'];
                        } else {
                            if (parameters['parent'] > 0) {
                                selectedNode = this.getNodeById(parameters['parent']);

                                if (selectedNode) {
                                    this.currentNodeId = parameters['parent_id'];
                                }
                            }
                        }
                    }
                }


                this.selectCurrentNode();
            },

            request : function(url, params) {
                if (!params) {
                    var params = {};
                }

                if (!params.form_key) {
                    params.form_key = FORM_KEY;
                }
                var result = new Ajax.Request(
                    url + (url.match(new RegExp('\\?')) ? '&isAjax=true' : '?isAjax=true' ),
                    {
                        parameters:  params,
                        method:      'post'
                    }
                );

                return result;
            },

            selectCurrentNode : function() {
                if (this.currentNodeId) {
                    var selectedNode = this.getNodeById(this.currentNodeId);

                    try {
                        this.getSelectionModel().select(selectedNode);
                    } catch (e) {}
                }
            },

            collapseTree : function() {
                this.collapseAll();
            },

            expandTree : function() {
                this.expandAll();
            },

            menuItemClick : function(node, e) {
                if (node.id == defaultLoadTreeParams.parameters.id) {
                    return;
                }

                var url = this.buildUrl(node.id);

                this.currentNodeId = node.id;

                if (!this.useAjax) {
                    setLocation(url);
                    return;
                }
            },

            buildUrl: function (id) {
                var urlExt = '';

                if (id != defaultLoadTreeParams.parameters.id) {
                    urlExt = 'item_id/'+ id+'/';
                }

                if (this.storeId) {
                    urlExt +=  'store/' + this.storeId + '/';
                }

                return parseSidUrl(this.baseUrl, urlExt);
            },
        });

        function reRenderTree()
        {
            _renderNewTree();
        }

        function _renderNewTree(config, storeParam) {
            if (!config) {
                var config = defaultLoadTreeParams;
            }

            if (tree) {
                tree.purgeListeners();
                tree.el.dom.innerHTML = '';
            }
            tree = new Ext.tree.TreePanel.Enhanced('tree-div', newTreeParams);
            tree.loadTree(config, true);

            var selectedNode = tree.getNodeById(config.parameters.menu_id);
            if (selectedNode) {
                tree.currentNodeId = config.parameters.menu_id;
            }

            tree.selectCurrentNode();

            // update content area
            var url = tree.editUrl;
            if (storeParam) {
                url = url + storeParam;
            }

            if (selectedNode && config.parameters.id != defaultLoadTreeParams.parameters.id) {
                url = url + 'item_id/' + config.parameters.id;
            }

            tree.expandAll();
        }

        jQuery(function () {
            itemMenuLoader = new Ext.tree.TreeLoader({
                dataUrl: '<?php echo $this->getLoadTreeUrl() ?>'
            });

            itemMenuLoader.createNode = function(config) {
                var node;
                var _node = Object.clone(config);
                if (config.children && !config.children.length) {
                    delete(config.children);
                    node = new Ext.tree.AsyncTreeNode(config);
                } else {
                    node = new Ext.tree.TreeNode(config);
                }

                return node;
            };

            itemMenuLoader.buildMenuTree = function(parent, config) {
                if (!config) return null;

                if (parent && config && config.length){
                    for (var i = 0; i < config.length; i++) {
                        var node;
                        var _node = Object.clone(config[i]);
                        if (_node.children && !_node.children.length) {
                            delete(_node.children);
                            node = new Ext.tree.AsyncTreeNode(_node);
                        } else {
                            node = new Ext.tree.TreeNode(config[i]);
                        }
                        parent.appendChild(node);
                        node.loader = node.getOwnerTree().loader;
                        if (_node.children) {
                            this.buildMenuTree(node, _node.children);
                        }
                    }
                }
            };

            itemMenuLoader.buildHash = function(node) {
                var hash = {};

                hash = this.toArray(node.attributes);

                if (node.childNodes.length>0 || (node.loaded==false && node.loading==false)) {
                    hash['children'] = new Array;

                    for (var i = 0, len = node.childNodes.length; i < len; i++) {
                        if (!hash['children']) {
                            hash['children'] = new Array;
                        }
                        hash['children'].push(this.buildHash(node.childNodes[i]));
                    }
                }

                return hash;
            };

            itemMenuLoader.toArray = function(attributes) {
                var data = {form_key: FORM_KEY};
                for (var key in attributes) {
                    var value = attributes[key];
                    data[key] = value;
                }

                return data;
            };

            itemMenuLoader.on("beforeload", function(treeLoader, node) {
                treeLoader.baseParams.id = node.attributes.id;
                treeLoader.baseParams.store = node.attributes.store_id;
                treeLoader.baseParams.form_key = FORM_KEY;
            });

            itemMenuLoader.on("load", function(treeLoader, node, config) {
//                varienWindowOnload();
            });

            newTreeParams = {
                animate         : false,
                loader          : itemMenuLoader,
                enableDD        : true,
                containerScroll : true,
                selModel        : new Ext.tree.CheckNodeMultiSelectionModel(),
                editUrl         : '<?php echo $block->getEditUrl() ?>',
                useAjax         : false,
                baseUrl         : '<?php echo $block->getEditUrl() ?>',
            };

            defaultLoadTreeParams = {
                parameters : {
                    text        : 'Root menu',
                    draggable   : false,
                    allowDrop   : true,
                    id          : 'root',
                    expanded    : true,
                    disabled    : true,
                    menu_id     : '<?php echo $viewModel->getItemId(); ?>',
                    store_id    : <?php echo $viewModel->getStoreId(); ?>,
                    parent      : <?php echo (int)$block->getRequest()->getParam('parent_id'); ?>
                },
                data : <?php echo $viewModel->getTreeJson() ?>
            };

            reRenderTree();
        });

        function addNew(url, isMainItem) {
            if (/store\/\d+/.test(url)) {
                url = url.replace(/store\/\d+/, "store/" + tree.storeId);
            }
            else {
                url += "store/" + tree.storeId + "/";
            }

            if (!isMainItem) {
                url += 'parent_id/' + tree.currentNodeId;
            }

            location.href = url;
        }

        function itemMenuMove(obj) {
            var data = {item_id: obj.dropNode.id, form_key: FORM_KEY};

            data.point = obj.point;
            switch (obj.point) {
                case 'above' :
                    data.pid = obj.target.parentNode.id;
                    data.paid = obj.dropNode.parentNode.id;
                    if (obj.target.previousSibling) {
                        data.aid = obj.target.previousSibling.id;
                    } else {
                        data.aid = 0;
                    }
                    break;
                case 'below' :
                    data.pid = obj.target.parentNode.id;
                    data.aid = obj.target.id;
                    break;
                case 'append' :
                    data.pid = obj.target.id;
                    data.paid = obj.dropNode.parentNode.id;
                    if (obj.target.lastChild) {
                        data.aid = obj.target.lastChild.id;
                    } else {
                        data.aid = 0;
                    }
                    break;
                default :
                    obj.cancel = true;
                    return obj;
            }

            var pd = [];
            for(var key in data) {
                pd.push(encodeURIComponent(key), "=", encodeURIComponent(data[key]), "&");
            }
            pd.splice(pd.length-1,1);
            registry.set('pd', pd.join(""));

            jQuery('[data-id="information-dialog-menu-item"]').modal({
                modalClass: 'confirm',
                title:  jQuery.mage.__('Warning message'),
                buttons: [{
                    text: 'Cancel',
                    class: 'action-secondary',
                    click: function () {
                        reRenderTree();
                        this.closeModal();
                    }
                }, {
                    text: 'Ok',
                    class: 'action-primary',
                    click: function () {
                        (function ($) {
                            $.ajax({
                                url: '<?= /* @escapeNotVerified */ $block->getMoveUrl() ?>',
                                method: 'POST',
                                data: registry.get('pd'),
                                showLoader: true
                            }).done(function (data) {
                                if (data.error) {
                                    reRenderTree();
                                } else {
                                    jQuery(obj.tree.container.dom).trigger('itemMenuMove.tree');
                                }

                                jQuery('.page-main-actions').next('.messages').remove();
                                jQuery('.page-main-actions').next('#messages').remove();
                                jQuery('.page-main-actions').after(data.messages);
                            }).fail(function (jqXHR, textStatus) {
                                if (window.console) {
                                    console.log(textStatus);
                                }
                                location.reload();
                            });
                        })(jQuery);
                        this.closeModal();
                    }
                }]

            }).trigger('openModal');
        }

        window.addNew = addNew;
    });

    //<![CDATA[

//    var tree;

    //]]>
</script>
